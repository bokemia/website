<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bokemia</title>
    <description>As a lightweight, curated look at my past work and current projects, Bokemia acts as both a portfolio and journal.</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 07 Sep 2024 14:26:41 -0400</pubDate>
    <lastBuildDate>Sat, 07 Sep 2024 14:26:41 -0400</lastBuildDate>
    <generator>Jekyll v4.3.3</generator>
    
      <item>
        <title>Deployment</title>
        <description>&lt;p&gt;Up until recently, my knowledge of hosting and deploying a website was next to nonexistent. My initial research turned out to be fruitful however, as I quickly learned that a website’s build could be hosted for free on &lt;a target=&quot;_blank&quot; href=&quot;https://github.com/&quot;&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt; and the advantages of doing so over the traditional method of renting a server and deploying updates manually.&lt;/p&gt;

&lt;p&gt;The main downside of the latter option, quite simply, is cost. While not tremendously expensive, we’re still talking about around $120 for the SSL Certificate alone plus $80 for the rental itself. That’s &lt;em&gt;per year&lt;/em&gt;, every year. Also, updates and new content to the site are either handled by FTP or through third-party applications, none of which I like using. On the other hand, hosting on GitHub (or similar venues) is free and pairing it with a service like &lt;a target=&quot;_blank&quot; href=&quot;https://netlify.com/&quot;&gt;&lt;strong&gt;Netlify&lt;/strong&gt;&lt;/a&gt; (which is also free) enables instantaneous, auto-deployment of any new content that’s pushed to the repository. That can be done directly from a command line or simply by dragging new files to the Git upload panel.&lt;/p&gt;

&lt;p&gt;It became a no-brainer overnight; I opted to host and deploy the site that way. The learning curve wasn’t too steep but I did get stumped on a few things. For instance, the distinction between my domain registrar’s DNS nameservers and Netlify’s own DNS system wasn’t obvious to me at first glance and GitHub’s interface felt a little intimidating for a new user. But it all worked out in the end and I am satisfied with the end result, from both production and performance standpoints.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/assets/images/endpoint.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 08 Apr 2022 00:00:00 -0400</pubDate>
        <link>/post005</link>
        <guid isPermaLink="true">/post005</guid>
        
        <category>Programming</category>
        
        <category>Development</category>
        
        <category>Jekyll</category>
        
        <category>HTML</category>
        
        <category>JavaScript</category>
        
        <category>CSS</category>
        
        
      </item>
    
      <item>
        <title>Final code</title>
        <description>&lt;p&gt;As I’m wrapping and cleaning what appears to be final code, I wanted to review the personal objectives that I had set for myself and by doing so, making sure I’ve adhered to them as best as I could throughout this whole process.&lt;/p&gt;

&lt;h2 id=&quot;features-and-goals&quot;&gt;Features and goals&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Conceived for ease of use and fast loading&lt;/li&gt;
  &lt;li&gt;Consistent layout throughout all entries of the same category&lt;/li&gt;
  &lt;li&gt;Uncluttered design with minimal distractions (apart from wolf pictures, obviously)&lt;/li&gt;
  &lt;li&gt;Soft colour scheme intended as a middle ground between light and dark modes&lt;/li&gt;
  &lt;li&gt;Written with open-source software and current markup languages and syntax&lt;/li&gt;
  &lt;li&gt;Absolutely no ads allowed and no tracking cookies of any kind either&lt;/li&gt;
  &lt;li&gt;Designed to accommodate an insane amount of wolf pictures&lt;/li&gt;
  &lt;li&gt;Page headers with customizable overlays&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;software-packages&quot;&gt;Software packages&lt;/h2&gt;

&lt;p&gt;Also, here is the collection of software packages I’m using to write and maintain the site. I’ve added a short description underneath each one in case you’re not already familiar with them. They’re all awesome, open-source and free to use too!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://jekyllrb.com/&quot;&gt;&lt;strong&gt;Jekyll&lt;/strong&gt;&lt;/a&gt;: A command line program that reads Markdown text files and renders them into static web pages. It doesn’t use databases at all and loads content from YAML and CSS instead, producing much cleaner code as a result. And databases suck anyways.&lt;/li&gt;
  &lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://www.ruby-lang.org/en/&quot;&gt;&lt;strong&gt;Ruby&lt;/strong&gt;&lt;/a&gt;: An object-oriented programming language which supports multiple paradigms. Its functional and simple nature made it a good fit for my limited set of skills.&lt;/li&gt;
  &lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://rubygems.org/&quot;&gt;&lt;strong&gt;RubyGems&lt;/strong&gt;&lt;/a&gt;: A package manager that provides a standard format for distributing libraries and applications built in Ruby. This is what powers Jekyll and makes it all work.&lt;/li&gt;
  &lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://handlebarsjs.com/installation/&quot;&gt;&lt;strong&gt;Handlebars&lt;/strong&gt;&lt;/a&gt;: An export tool that lets you build semantic templates effectively. It is compatible with Jekyll and allows HTML layouts to be precompiled and included as JavaScript code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And if you’re curious to learn a bit more, here is a list I’ve compiled of all the &lt;a href=&quot;/attributions/&quot;&gt;&lt;strong&gt;source code&lt;/strong&gt;&lt;/a&gt; I’m currently using under license.&lt;/p&gt;

&lt;p&gt;This is a really fun project for me and I’m looking forward to adding my portfolio and updating the site in the coming months.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/assets/images/endpoint.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Apr 2022 00:00:00 -0400</pubDate>
        <link>/post004</link>
        <guid isPermaLink="true">/post004</guid>
        
        <category>Programming</category>
        
        <category>Development</category>
        
        <category>Jekyll</category>
        
        <category>HTML</category>
        
        <category>JavaScript</category>
        
        <category>CSS</category>
        
        
      </item>
    
      <item>
        <title>Courtesy delivery</title>
        <description>&lt;p&gt;To me, the single most important principle a website needs to comply with is courtesy delivery. When a page is flashing ads about discounted crap I neither want or need, or starts asking me questions, then I couldn’t care less about how pretty it looks. What I do appreciate is a page that’s as inviting as it is functional. The flow is mightier than the show. Or something like that. I guess what I’m trying to convey is that design is only one feature. The code behind any page—although invisible in nature—is ultimately the main gate that will either please or repel you.&lt;/p&gt;

&lt;p&gt;So when I decided to write this site myself, I knew two things. First, that it would be a heck of a challenge considering my lack of experience. And second, that it would have to adhere to the courtesy delivery principle. Over the last few weeks, I’ve tried to implement as many reader-friendly, no-bullshit items as I could think of.&lt;/p&gt;

&lt;h2 id=&quot;must-have-items-to-implement&quot;&gt;Must-have items to implement&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;A landing page that doesn’t scroll forever (it shouldn’t be lengthier than four or five notches on the mouse wheel or a few finger swipes)&lt;/li&gt;
  &lt;li&gt;Really fast-loading pages (I wanted them to be near instantaneous)&lt;/li&gt;
  &lt;li&gt;No subscription prompts and no questions asked to visitors&lt;/li&gt;
  &lt;li&gt;No convoluted menu bars and obtrusive panels&lt;/li&gt;
  &lt;li&gt;A pop-up/cookie-free policy&lt;/li&gt;
  &lt;li&gt;A useable, concise footer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m also learning to write more efficiently in the meantime by using annotations and margin comments where I deem them necessary.&lt;/p&gt;

&lt;p&gt;Next time, I believe I’ll be ready to wrap up my codebase and begin the actual site production.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/assets/images/endpoint.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 06 Apr 2022 00:00:00 -0400</pubDate>
        <link>/post003</link>
        <guid isPermaLink="true">/post003</guid>
        
        <category>Programming</category>
        
        <category>Development</category>
        
        <category>Jekyll</category>
        
        <category>HTML</category>
        
        <category>JavaScript</category>
        
        <category>CSS</category>
        
        
      </item>
    
      <item>
        <title>No cookies</title>
        <description>&lt;p&gt;Today, I’d like to share my intention of not allowing cookies of any kind on my site and here’s the reasoning behind it.&lt;/p&gt;

&lt;p&gt;Now, cookies aren’t inherently bad and usually require the user’s permission to function properly anyway, if at all—by storing an identifier within the browser’s cache—so I won’t try to convince anyone that they should avoid them like the plague. In other words, in many cases they are useful.&lt;/p&gt;

&lt;p&gt;But their presence can also be very annoying when they trigger pop-up messages over the content you’re trying to read. And when a page feels like it would perform better without them, or when they effectively do more harm than good, then the page shouldn’t prompt any to begin with. The use of tracking cookies, the worst offender of them all, can lead to all kinds of privacy issues for visitors. Showing a disclaimer does nothing to advise of potential dangers and no amount of corporate legal bullshit we tell ourselves will change that. That’s my general sentiment, anyway.&lt;/p&gt;

&lt;p&gt;And as the modern web’s automation is becoming increasingly dominant, I try to remind myself that the user’s prerogative is—and always should be—front and centre.&lt;/p&gt;

&lt;p&gt;I’ve also been busy with borders and padding these past few days. I’ve just learned of &lt;strong&gt;Bootstrap Wells&lt;/strong&gt;, which is a class specifically designed for them. I was struggling with attributing a given space between some buttons or general interface elements. It turns out I wasn’t using the right syntax order at all. For some reason, &lt;strong&gt;min-height&lt;/strong&gt; must be assigned first in the code block, otherwise it won’t do anything. I’m not sure how I’ve missed this as it’s thoroughly documented everywhere. At any rate, here’s what finally worked.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;.well {
  min-height: 20px;
  padding: 19px;
  margin-bottom: 20px;
  background-color: #f5f5f5;
  border: 1px solid #e3e3e3;
  border-radius: $border-radius;
  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/assets/images/endpoint.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Apr 2022 00:00:00 -0400</pubDate>
        <link>/post002</link>
        <guid isPermaLink="true">/post002</guid>
        
        <category>Programming</category>
        
        <category>Development</category>
        
        <category>Jekyll</category>
        
        <category>HTML</category>
        
        <category>JavaScript</category>
        
        <category>CSS</category>
        
        
      </item>
    
      <item>
        <title>A new beginning</title>
        <description>&lt;p&gt;Hi and welcome to the first entry in what I’m hoping will become a series of posts detailing the creation of the very website you are currently visiting.&lt;/p&gt;

&lt;p&gt;A while ago I started taking online courses to teach myself how to code—mainly in HTML, JavaScript and CSS—and while it’s been a great deal of fun and a good exercise in acquiring the fundamentals, I thought now was the time to use what I’d learned and try to write and upload my own website on a server somewhere. Probably in Florida. Or maybe elsewhere, what do I know?&lt;/p&gt;

&lt;p&gt;Anyway, my site is written in Markdown syntax using plain text files and doesn’t require a content management system to run; for keeping the code readable and easy to iterate upon, entries are linked using what is called &lt;em&gt;automated taxonomy collection&lt;/em&gt; (I swear I didn’t make that up).&lt;/p&gt;

&lt;h2 id=&quot;dont-we-all-have-to-start-somewhere&quot;&gt;Don’t we all have to start somewhere?&lt;/h2&gt;

&lt;p&gt;Right now, I’m barely getting started on the project. Current tasks include writing an index, setting up page navigation and customizing the &lt;strong&gt;&amp;lt;head&amp;gt;&lt;/strong&gt; and &lt;strong&gt;&amp;lt;body&amp;gt;&lt;/strong&gt; sections with specific stylesheets for tables and code blocks, such as the &lt;a target=&quot;_blank&quot; href=&quot;https://cdnjs.com/libraries/prism&quot;&gt;Prism syntax highlighter&lt;/a&gt;. Below is an excerpt that shows how I extended my CSS with scripts that are hosted externally.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;!-- CSS Styles --&amp;gt;
&amp;lt;link href=&quot;/assets/css/style.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
&amp;lt;link href=&quot;Prism link here&quot; rel=&quot;stylesheet&quot;&amp;gt;

&amp;lt;!-- Javascript Assets --&amp;gt;
&amp;lt;script src=&quot;/assets/js/jquery-3.2.1.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;/assets/js/plugins.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;/assets/js/custom.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;Prism link here&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;Prism link here&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Speaking of tags, I’m a big supporter of minimal tagging, meaning that a page, post or article shouldn’t be called upon by more than a handful of them. This makes page headers and feeds far easier to read and understand. And since I’m fairly new to all this, I can certainly appreciate the ability to flip through different sections like I would a printed book.&lt;/p&gt;

&lt;p&gt;Next time I’ll get into the no-cookie policy I want to implement.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/assets/images/endpoint.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Apr 2022 00:00:00 -0400</pubDate>
        <link>/post001</link>
        <guid isPermaLink="true">/post001</guid>
        
        <category>Programming</category>
        
        <category>Development</category>
        
        <category>Jekyll</category>
        
        <category>HTML</category>
        
        <category>JavaScript</category>
        
        <category>CSS</category>
        
        
      </item>
    
  </channel>
</rss>
